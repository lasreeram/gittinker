#!/usr/bin/env python
from MyExecPkg import ExecGit
import sys;
import os;

#initialize objects
execgit = ExecGit()

def print_help():
   print( "help:" )
   print( "\tmy_pkglist <commit number>\n" )
   print( "INFO: commit number - find packages in this commit number" )

#git diff-tree --no-commit-id --name-only -r 8e9d4af83dae5e2c91834126eaffe2919192dcd8
def getSetOfPackagesFromCommits(commits):
    listOfPackages = []
    for commit in commits:
        git_diff_cmd = ["git", "diff-tree", "--no-commit-id", "--name-only", "-r", commit ]
        retCode,retErr,retStr = execgit.execCommand(git_diff_cmd)
        fileList = retStr.split("\n");
        for item in fileList:
            item = item.strip(' ')
            item = item.strip('\0')
            item = item.strip('\n')
            splitPath = item.split(os.path.sep)
            #print(splitPath)
            if( len(splitPath) > 1 ):
                 packageName = splitPath[0]
                 listOfPackages.append(packageName)

    #print("list of packages:")
    #print(listOfPackages)
    setOfPackages = set(listOfPackages)
    return setOfPackages

        
def main():
    if(len(sys.argv) != 2 ):
        print_help()
        sys.exit(1)

    #cannot check in if there are uncommitted files
    commits = [sys.argv[1]]
    # there are commits to be pushed. Find out if version numbers need to be changed
    setOfPackages = getSetOfPackagesFromCommits(commits)
    if ( len(setOfPackages) == 0): #there are commits to be pushed
        print("INFO: no packages found in this commit" )
    else:
        for package in setOfPackages:
            print(package)

               
main()

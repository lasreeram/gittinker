#!/usr/bin/env python
from MyExecPkg import ExecGit
import sys;
import os;

#initialize objects
execgit = ExecGit()

def print_help():
   print( "help:" )
   print( "\tmy_checkout <feature>\n" )
   print( "INFO: <feature> - name of the branch to check out" )

def fetch_all_features():
    #git fetch all commamnd - to identify files to be added
    git_fetch_all_cmd = ["git", "fetch", "--all"]
    retCode,retErr,retStr = execgit.execCommand(git_fetch_all_cmd)

def checkout_feature():
    feature = sys.argv[1]
    git_checkout_cmd = ["git", "checkout", feature]
    retCode,retErr,retStr = execgit.execCommand(git_checkout_cmd)

def build_links_to_from_sdir_to_packages():
    path = '.'
    files = os.listdir(path)
    packages = filter( lambda x: (x != '.git' and x != 'MyExecPkg' and os.path.isdir(x)), files )
    for package in packages:
        fullPathOfPackage = os.path.abspath(package)
        if( not os.path.exists( os.path.expandvars( "$MY_SOURCE_DIR" + os.path.sep + package ) ) ):
            os_create_link_cmd = [ "ln", "-s", fullPathOfPackage,  os.path.expandvars( "$MY_SOURCE_DIR" + os.path.sep + package ) ]
            retCode,retErr,retStr = execgit.execCommand(os_create_link_cmd)
            #print( fullPathOfPackage )
            print( "INFO: created link " + os.path.expandvars( "$MY_SOURCE_DIR" + os.path.sep + package )  )
    #print( packages )

def main():

    if(len(sys.argv) != 2 ):
        print_help()
        sys.exit(1)

    #do work
    fetch_all_features()
    checkout_feature()
    build_links_to_from_sdir_to_packages()

main()
